##################################################
# 根据原来的xxxxxDesc.cpp文件，生成数据包处理函数类
# 依赖原FTCPPackageDesc.cpp中的TID以及包体内容的定义
# date: 2017-5-16
# powered by cgm
# 用法: 本脚本只根据FTCPPackageDesc.cpp文件,进行生成
#       生成处理函数后，可手动裁剪，以适用模块的具体需求
#       对于函数的具体定义，可以手动进一步修改    
##################################################

#<<"XXX"

# 定义对象符号，方便修改以及统一替换
#XX="TEST"
XX="XXXX"

if [ $# -eq 0 ]; then
	src_file="./desc_sample.cpp"
elif [ $# -eq 1 ]; then
	src_file=$1
else
	echo "Invalid argument!"
	printf "    Usage:\n"
	printf "        $0 (use default desc.cpp file)\n"
	printf "        $0 [config_desc.cpp file]\n"
	exit 0
fi
if [ -f $src_file ]; then
	echo "Input file=$src_file"
else
	echo "Input file does not exist!"
	exit -1
fi

tmp_file="./tmp.tmp"
target_file="./handle_"$XX"_h_gen_by_tool.h"
let total_tid=0
let line_num=0
let total_line=`cat $src_file|wc -l`

rm -f $target_file

echo "//////////////////////////////////////////////////" >> $target_file
echo "// `date +%Y%m%d`" >> $target_file
echo "// generated by [$0] from [$src_file]" >> $target_file
echo "//////////////////////////////////////////////////" >> $target_file
echo "#ifndef __HANDEL_"$XX"_DEF_H__" >>  $target_file
echo "#define __HANDLE_"$XX"_DEF_H__" >>  $target_file

echo "" >>  $target_file
echo '#include "fftp.h"' >>  $target_file
echo '#include "pkg_def.h"' >>  $target_file
echo "" >>  $target_file
echo 'namespace nm_busi' >>  $target_file
echo '{'                                   >>  $target_file
echo "" >>  $target_file
echo "class busi_$XX"                      >>  $target_file
echo '{'                                   >>  $target_file
echo 'public:'                             >>  $target_file

while read aline
do
#	echo "line content: "$aline
	# 这行有多种写法
	tid=`expr "$aline" : '\s*{\(TID_.*\),{'`
	if [[ "$tid" != "" ]]; then
		# 对于函数名、包名，未来应该还有进一步的裁剪以及分词的方法，
		# TODO 以后再补充
		# 下面这行，是将下划线'-'前的内容全部去除掉
		# 1.
		busi_name=`echo ${tid#*_}`
		# 大写转小写
		busi_name_lower=`echo $busi_name | tr [A-Z] [a-z]`
#		echo $busi_name
		# 2.
		cmnt=`echo "$aline" | cut -d '"' -f 2`
#		echo $cmnt

		# 开始构造函数头文件
		printf "    // 处理 $cmnt\n" >> $target_file
		printf "    int32_t handle_$busi_name_lower($busi_name_lower* pkg,\n" >> $target_file
		printf "            int16_t idx, void* udata, uint16_t vm_id, uint32_t cid);\n" >> $target_file
		# TID计数
		let total_tid++
	fi

	let line_num++
	let percent=0
	percent=`awk -v x=$line_num -v y=$total_line 'BEGIN{printf "%02d",x/y*100}'`
	printf " [In process]:$line_num/$total_line ($percent%%)\r"

done < $src_file

echo '};'      >> $target_file
echo ""        >> $target_file
echo '}'       >> $target_file
echo ""        >> $target_file
echo "// There are $total_tid functions define in total" >> $target_file
echo "// Attention! This number is reliable depens on nobody modify this file manually!" >> $target_file
echo ""        >> $target_file
echo '#endif'  >> $target_file
echo ""        >> $target_file

#XXX

